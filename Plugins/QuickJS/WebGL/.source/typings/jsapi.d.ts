export { };

declare global {
  export type Pointer<T> = number;

  export type Byte = number;
  export type Int64 = number;
  export type UInt32 = number;

  export type IntPtr = Pointer<'IntPtr'>;
  export type JSPayloadHeader = Pointer<'JSPayloadHeader'>;
  export type JSValue = Pointer<'JSValue'>;
  export type JSAtom = Pointer<'JSAtom'>;
  export type JSContext = Pointer<'JSContext'>;
  export type JSRuntime = Pointer<'JSRuntime'>;
  export type JSModuleDef = Pointer<'JSModuleDef'>;
  export type JSClassID = Pointer<'JSClassID'>;
  export type JSMemoryUsage = Pointer<'JSMemoryUsage'>;
  export type size_t = number;

  export declare interface JSApiExternals {
    static JS_SetModuleLoaderFunc(rt: JSRuntime, module_normalize: IntPtr, module_loader: IntPtr, opaque: IntPtr): void;
    static JS_GetImportMeta(ctx: JSContext, m: JSModuleDef): JSValue;
    static JSB_GetBridgeClassID(): JSClassID;
    static jsb_construct_bridge_object(ctx: JSContext, proto: JSValue, object_id: number): JSValue;
    static jsb_new_bridge_object(ctx: JSContext, proto: JSValue, object_id: number): JSValue;
    static JSB_NewBridgeClassObject(ctx: JSContext, new_target: JSValue, object_id: number): JSValue;
    static jsb_new_bridge_value(ctx: JSContext, proto: JSValue, size: UInt32): JSValue;
    static JSB_NewBridgeClassValue(ctx: JSContext, new_target: JSValue, size: number): JSValue;
    static JSB_FreePayload(ctx: JSContext, val: JSValue): JSPayloadHeader;
    static jsb_get_payload_header(ctx: JSContext, val: JSValue): JSPayloadHeader;
    static jsb_get_floats(ctx: JSContext, val: JSValue, n: number, v0: Pointer<number>): number;
    static jsb_set_floats(ctx: JSContext, val: JSValue, n: number, v0: Pointer<number>): number;
    static jsb_set_float_2(ctx: JSContext, val: JSValue, v0: number, v1: number): number;
    static jsb_set_float_3(ctx: JSContext, val: JSValue, v0: number, v1: number, v2: number): number;
    static jsb_set_float_4(ctx: JSContext, val: JSValue, v0: number, v1: number, v2: number, v3: number): number;
    static jsb_set_int_1(ctx: JSContext, val: JSValue, v0: number): number;
    static jsb_set_int_2(ctx: JSContext, val: JSValue, v0: number, v1: number): number;
    static jsb_set_int_3(ctx: JSContext, val: JSValue, v0: number, v1: number, v2: number): number;
    static jsb_set_int_4(ctx: JSContext, val: JSValue, v0: number, v1: number, v2: number, v3: number): number;
    static jsb_set_byte_4(ctx: JSContext, val: JSValue, v0: Byte, v1: Byte, v2: Byte, v3: Byte): number;
    static jsb_get_bytes(ctx: JSContext, val: JSValue, n: number, v0: Pointer<Byte>): number;
    static jsb_set_bytes(ctx: JSContext, val: JSValue, n: number, v0: Pointer<Byte>): number;
    static JSB_NewRuntime(class_finalizer: IntPtr): JSRuntime;
    static JSB_GetRuntimeOpaque(rt: JSRuntime): IntPtr;
    static JSB_SetRuntimeOpaque(rt: JSRuntime, opaque: IntPtr): void;
    static JSB_FreeRuntime(rt: JSRuntime): number;
    static JS_GetRuntime(ctx: JSContext): JSRuntime;
    static JS_NewContext(rt: JSRuntime): JSContext;
    static JS_FreeContext(ctx: JSContext): void;
    static JS_GetGlobalObject(ctx: JSContext): JSValue;
    static JS_IsInstanceOf(ctx: JSContext, val: JSValue, obj: JSValue): number;
    static JS_NewPromiseCapability(ctx: JSContext, resolving_funcs: Pointer<JSValue>): JSValue;
    static JS_SetHostPromiseRejectionTracker(rt: JSRuntime, cb: IntPtr, opaque: IntPtr): void;
    static JS_GetPropertyUint32(ctx: JSContext, this_obj: JSValue, idx: UInt32): JSValue;
    static JS_GetPropertyInternal(ctx: JSContext, obj: JSValue, prop: JSAtom, receiver: JSValue, throw_ref_error: number): JSValue;
    static JS_GetPropertyStr(ctx: JSContext, this_obj: JSValue, prop: string): JSValue;
    static JS_DefineProperty(ctx: JSContext, this_obj: JSValue, prop: JSAtom, val: JSValue, getter: JSValue, setter: JSValue, flags: JSPropFlags): number;
    static JS_DefinePropertyValue(ctx: JSContext, this_obj: JSValue, prop: JSAtom, val: JSValue, flags: JSPropFlags): number;
    static JS_GetException(ctx: JSContext): JSValue;
    static JS_IsError(ctx: JSContext, val: JSValue): number;
    static JSB_ThrowError(ctx: JSContext, buf: Pointer<Byte>, buf_len: size_t): JSValue;
    static JSB_ThrowTypeError(ctx: JSContext, msg: Pointer<Byte>): JSValue;
    static JSB_ThrowInternalError(ctx: JSContext, msg: Pointer<Byte>): JSValue;
    static JSB_ThrowRangeError(ctx: JSContext, msg: Pointer<Byte>): JSValue;
    static JSB_ThrowReferenceError(ctx: JSContext, msg: Pointer<Byte>): JSValue;
    static JSB_NewEmptyString(ctx: JSContext): JSValue;
    static JS_NewString(ctx: JSContext, str: Pointer<Byte>): JSValue;
    static JS_NewStringLen(ctx: JSContext, buf: Pointer<Byte>, buf_len: size_t): JSValue;
    static JSB_NewInt64(ctx: JSContext, val: Int64): JSValue;
    static JSB_NewFloat64(ctx: JSContext, d: number): JSValue;
    static JS_NewAtomLen(ctx: JSContext, str: Pointer<Byte>, len: size_t): JSAtom;
    static JS_DupAtom(ctx: JSContext, v: JSAtom): JSAtom;
    static JS_FreeAtom(ctx: JSContext, v: JSAtom): void;
    static JS_AtomToString(ctx: JSContext, atom: JSAtom): JSValue;
    static jsb_crossbind_constructor(ctx: JSContext, new_target: JSValue): JSValue;
    static JS_NewObject(ctx: JSContext): JSValue;
    static JS_IsFunction(ctx: JSContext, val: JSValue): number;
    static JS_IsConstructor(ctx: JSContext, val: JSValue): number;
    static JS_NewArray(ctx: JSContext): JSValue;
    static JS_IsArray(ctx: JSContext, val: JSValue): number;
    static JS_GetContextOpaque(ctx: JSContext): IntPtr;
    static JS_SetContextOpaque(ctx: JSContext, opaque: IntPtr): void;
    static JSB_NewCFunctionMagic(ctx: JSContext, func: IntPtr, atom: JSAtom, length: number, cproto: JSCFunctionEnum, magic: number): JSValue;
    static JSB_NewCFunction(ctx: JSContext, func: IntPtr, atom: JSAtom, length: number, cproto: JSCFunctionEnum, magic: number): JSValue;
    static JS_SetConstructor(ctx: JSContext, func_obj: JSValue, proto: JSValue): void;
    static JS_SetPropertyInternal(ctx: JSContext, this_obj: JSValue, prop: JSAtom, val: JSValue, flags: number): number;
    static JS_SetPropertyUint32(ctx: JSContext, this_obj: JSValue, idx: UInt32, val: JSValue): number;
    static JS_HasProperty(ctx: JSContext, this_obj: JSValue, prop: JSAtom): number;
    static JS_ParseJSON(ctx: JSContext, buf: Pointer<Byte>, buf_len: size_t, filename: Pointer<Byte>): JSValue;
    static JS_JSONStringify(ctx: JSContext, obj: JSValue, replacer: JSValue, space0: JSValue): JSValue;
    static JS_CallConstructor(ctx: JSContext, func_obj: JSValue, argc: number, argv: Pointer<JSValue>): JSValue;
    static JS_Call(ctx: JSContext, func_obj: JSValue, this_obj: JSValue, argc: number, argv: Pointer<JSValue>): JSValue;
    static JS_Invoke(ctx: JSContext, this_val: JSValue, atom: JSAtom, argc: number, argv: Pointer<JSValue>): JSValue;
    static JS_SetPrototype(ctx: JSContext, obj: JSValue, proto_val: JSValue): number;
    static JS_RunGC(rt: JSRuntime): void;
    static JS_ToBool(ctx: JSContext, val: JSValue): number;
    static js_free(ctx: JSContext, ptr: IntPtr): void;
    static JS_ReadObject(ctx: JSContext, buf: Pointer<Byte>, buf_len: size_t, flags: number): JSValue;
    static JS_Eval(ctx: JSContext, input: Pointer<Byte>, input_len: size_t, filename: Pointer<Byte>, eval_flags: JSEvalFlags): JSValue;
    static JS_EvalFunction(ctx: JSContext, fun_obj: JSValue): JSValue;
    static JS_ResolveModule(ctx: JSContext, obj: JSValue): number;
    static JSB_DupValue(ctx: JSContext, v: JSValue): JSValue;
    static JSB_FreeValue(ctx: JSContext, v: JSValue): void;
    static JSB_FreeValueRT(rt: JSRuntime, v: JSValue): void;
    static JSB_ATOM_Proxy(): JSAtom;
    static JSB_ATOM_constructor(): JSAtom;
    static JSB_ATOM_Number(): JSAtom;
    static JSB_ATOM_Object(): JSAtom;
    static JSB_ATOM_String(): JSAtom;
    static JSB_ATOM_Function(): JSAtom;
    static JSB_ATOM_Error(): JSAtom;
    static JS_AddIntrinsicOperators(ctx: JSContext): void;
    static JSB_ATOM_Operators(): JSAtom;
    static JSB_ATOM_Symbol_operatorSet(): JSAtom;
    static JSB_ATOM_name(): JSAtom;
    static JSB_ATOM_message(): JSAtom;
    static JSB_ATOM_fileName(): JSAtom;
    static JSB_ATOM_lineNumber(): JSAtom;
    static JSB_ATOM_length(): JSAtom;
    static JSB_ATOM_stack(): JSAtom;
    static JSB_ATOM_prototype(): JSAtom;
    static JSB_Init(): number;
    static JS_FreeCString(ctx: JSContext, ptr: IntPtr): void;
    static js_strndup(ctx: JSContext, s: Pointer<Byte>, n: size_t): IntPtr;
    static JS_NewArrayBufferCopy(ctx: JSContext, buf: Pointer<Byte>, len: size_t): JSValue;
    static JS_ComputeMemoryUsage(rt: JSRuntime, s: Pointer<JSMemoryUsage>): void;
    static JS_SetInterruptHandler(rt: JSRuntime, cb: IntPtr, opaque: IntPtr): void;
  }
}
